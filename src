`timescale 1ns / 1ps
//=============================================================================
//module : elevator module 
//purpose: to define fsm 
//============================================================================

module elevator(
    input clk,rst,
    input rA,rB,rC,rD,
    output reg [1:0]floor,
    output reg dir
    );
    reg [1:0]nxt_state,pr_state;
    parameter A=2'b00,B=2'b01,C=2'b10,D=2'b11;
    
    always @(posedge clk) begin
        if(rst)
            pr_state<=A;
        else 
            pr_state<=nxt_state;
   end 
   
   always @(*) begin
    nxt_state=pr_state;
    dir=dir;
    case(pr_state)
        A:begin
                if(rA)begin
                    nxt_state=A;
                    dir=1'b1;
                end 
                else if(rB)begin
                    nxt_state=B; 
                    dir=1'b1;
                end
                
                else if(rC)begin
                    nxt_state=C;
                    dir=1'b1;
                end 
                
                else if(rD)begin
                    nxt_state=D;
                    dir=1'b1;
                end 
          
          end 
          
        B:begin
                if(rA)begin
                    nxt_state=A;
                    dir=1'b0;
                end 
                else if(rB)begin
                    nxt_state=B; 
                    dir=1'b1;
                end
                
                else if(rC)begin
                    nxt_state=C;
                    dir=1'b1;
                end 
                
                else if(rD)begin
                    nxt_state=D;
                    dir=1'b1;
                end 
          
          end 
        C:begin
                if(rA)begin
                    nxt_state=A;
                    dir=1'b0;
                end 
                else if(rB)begin
                    nxt_state=B; 
                    dir=1'b0;
                end
                
                else if(rC)begin
                    nxt_state=C;
                    dir=1'b1;
                end 
                
                else if(rD)begin
                    nxt_state=D;
                    dir=1'b1;
                end 
          
          end 
       
       D:begin
                if(rA)begin
                    nxt_state=A;
                    dir=1'b0;
                end 
                else if(rB)begin
                    nxt_state=B; 
                    dir=1'b0;
                end
                
                else if(rC)begin
                    nxt_state=C;
                    dir=1'b0;
                end 
                
                else if(rD)begin
                    nxt_state=D;
                    dir=1'b1;
                end 
          
          end 
    endcase
    end
    
    
    always @(*)begin
        case(pr_state)
            A:floor=2'b00;
            B:floor=2'b01;
            C:floor=2'b10;
            D:floor=2'b11; 
        endcase
    end 
endmodule


